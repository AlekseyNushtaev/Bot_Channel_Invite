import asyncio

from aiogram import types, F, Router
from aiogram.filters import ChatMemberUpdatedFilter, KICKED, MEMBER, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import default_state, StatesGroup, State
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ChatMemberUpdated
from openpyxl import Workbook
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from openpyxl.utils import get_column_letter
from io import BytesIO


from config import ADMIN_IDS
from db.utils import add_subscription_request, confirm_subscription, update_user_unblocked, \
    update_user_blocked, get_all_users_unblock

from bot import bot
from db.models import SessionLocal, SubscriptionRequest
from keyboard import create_kb, kb_button

router = Router()


class FSMFillForm(StatesGroup):
    get_phone = State()
    send = State()
    text_add_button = State()
    check_text_1 = State()
    check_text_2 = State()
    text_add_button_text = State()
    text_add_button_url = State()
    photo_add_button = State()
    check_photo_1 = State()
    check_photo_2 = State()
    photo_add_button_text = State()
    photo_add_button_url = State()
    video_add_button = State()
    check_video_1 = State()
    check_video_2 = State()
    video_add_button_text = State()
    video_add_button_url = State()
    check_video_note_1 = State()
    send_id = State()
    send_to_one = State()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ
@router.chat_join_request()
async def handle_join_request(join_request: types.ChatJoinRequest):
    user = join_request.from_user
    chat = join_request.chat
    # try:
    #     invite_link = await bot.export_chat_invite_link(chat_id=chat.id)  # –ü–æ–ª–Ω–∞—è —Å—Å—ã–ª–∫–∞
    # except Exception:
    invite_link = None

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—è–≤–∫—É –≤ –ë–î
    add_subscription_request(
        user_id=user.id,
        username=user.username,
        first_name=user.first_name,
        last_name=user.last_name,
        channel_id=chat.id,
        channel_name=chat.title,
        channel_link=invite_link
    )

    # –°–æ–∑–¥–∞–µ–º Reply –∫–Ω–æ–ø–∫—É
    subscribe_button = KeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")
    reply_markup = ReplyKeyboardMarkup(
        keyboard=[[subscribe_button]],
        resize_keyboard=True,
        one_time_keyboard=True
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
    send_msg = await bot.send_message(
        chat_id=user.id,
        text=f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —á—Ç–æ –≤—ã –Ω–µ —Ä–æ–±–æ—Ç ü§ñ",
        reply_markup=reply_markup
    )
    await asyncio.sleep(60)
    try:
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"
        await send_msg.delete()
    except Exception as e:
        pass


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è"
@router.message(F.text == "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")
async def handle_subscribe_button(message: types.Message):
    user = message.from_user

    # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∞–∫—Ç–∏–≤–Ω—É—é –∑–∞—è–≤–∫—É
    db = SessionLocal()
    try:
        request = db.query(SubscriptionRequest).filter(
            SubscriptionRequest.user_id == user.id,
            SubscriptionRequest.time_confirm.is_(None),
        ).order_by(SubscriptionRequest.time_request.desc()).first()

        if not request:
            # await message.answer("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫.")
            return

        # –û–¥–æ–±—Ä—è–µ–º –∑–∞—è–≤–∫—É
        try:
            # await bot.approve_chat_join_request(
            #     chat_id=request.channel_id,
            #     user_id=user.id,
            # )
            confirm_subscription(user.id, request.channel_id)

            # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª
            # channel_link = request.channel_link

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
            # text = f"–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ !"
            # reply_markup = None
            #
            # if channel_link:
            #     reply_markup = InlineKeyboardMarkup(inline_keyboard=[
            #         [InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª", url=channel_link)]
            #     ])

            confirmation_msg = await message.answer(
                text="–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏ !",
                reply_markup=None
            )


            # –£–±–∏—Ä–∞–µ–º Reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            # await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É!", reply_markup=types.ReplyKeyboardRemove())
            # –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É
            await asyncio.sleep(60)  # –ñ–¥–µ–º –º–∏–Ω—É—Ç—É

            try:
                # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"
                await message.delete()
            except Exception as e:
                pass
                # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ —Å –∫–Ω–æ–ø–∫–æ–π
            try:
                await bot.delete_message(chat_id=user.id, message_id=message.message_id - 1)
            except Exception as e:
                pass
                # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏"
            try:
                await confirmation_msg.delete()
            except Exception as e:
                pass
        except Exception as e:
            pass
            # await message.answer("‚ùå –û—à–∏–±–∫–∞. –í–æ–∑–º–æ–∂–Ω–æ, –∑–∞—è–≤–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∏–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    finally:
        db.close()


@router.my_chat_member(ChatMemberUpdatedFilter(member_status_changed=KICKED))
async def user_blocked_bot(event: ChatMemberUpdated):
    update_user_blocked(event.from_user.id)


@router.my_chat_member(ChatMemberUpdatedFilter(member_status_changed=MEMBER))
async def user_unblocked_bot(event: ChatMemberUpdated):
    update_user_unblocked(event.from_user.id)



@router.message(F.text == 'Send', StateFilter(default_state), F.from_user.id.in_(ADMIN_IDS))
async def send_to_all(message: types.Message, state: FSMContext):
    await message.answer(text='–°–µ–π—á–∞—Å –º—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ —é–∑–µ—Ä–∞–º!\n'
                              '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–∂–ª —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫—É(–º–æ–∂–Ω–æ —Å —Ç–µ–∫—Å—Ç–æ–º) –∏–ª–∏ –≤–∏–¥–µ–æ(–º–æ–∂–Ω–æ —Å —Ç–µ–∫—Å—Ç–æ–º) –∏–ª–∏ –≤–∏–¥–µ–æ-–∫—Ä—É–∂–æ–∫')
    await state.set_state(FSMFillForm.send)


@router.message(F.text, StateFilter(FSMFillForm.send), F.from_user.id.in_(ADMIN_IDS))
async def text_add_button(message: types.Message, state: FSMContext):
    await state.update_data(text=message.text)
    await message.answer(text='–î–æ–±–∞–≤–∏–º –∫–Ω–æ–ø–∫—É-—Å—Å—ã–ª–∫—É?', reply_markup=create_kb(2, yes='–î–∞', no='–ù–µ—Ç'))
    await state.set_state(FSMFillForm.text_add_button)


@router.callback_query(F.data == 'no', StateFilter(FSMFillForm.text_add_button), F.from_user.id.in_(ADMIN_IDS))
async def text_add_button_no(cb: types.CallbackQuery, state: FSMContext):
    dct = await state.get_data()
    await cb.message.answer(text='–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏')
    await cb.message.answer(text=dct['text'])
    await cb.message.answer(text='–û—Ç–ø—Ä–∞–≤–ª—è–µ–º?', reply_markup=create_kb(2, yes='–î–∞', no='–ù–µ—Ç'))
    await state.set_state(FSMFillForm.check_text_1)


@router.callback_query(F.data == 'yes', StateFilter(FSMFillForm.check_text_1), F.from_user.id.in_(ADMIN_IDS))
async def check_text_yes_1(cb: types.CallbackQuery, state: FSMContext):
    dct = await state.get_data()
    users = get_all_users_unblock()
    count = 0
    for user_id in users:
        try:
            await bot.send_message(user_id, text=dct['text'])
            count += 1
        except Exception as e:
            await bot.send_message(1012882762, str(e))
            await bot.send_message(1012882762, str(user_id))
    await cb.message.answer(text=f'–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {count} —é–∑–µ—Ä–∞–º')
    await state.set_state(default_state)
    await state.clear()


@router.callback_query(F.data == 'yes', StateFilter(FSMFillForm.text_add_button), F.from_user.id.in_(ADMIN_IDS))
async def text_add_button_yes_1(cb: types.CallbackQuery, state: FSMContext):
    await cb.message.answer(text='–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏-—Å—Å—ã–ª–∫–∏')
    await state.set_state(FSMFillForm.text_add_button_text)


@router.message(F.text, StateFilter(FSMFillForm.text_add_button_text), F.from_user.id.in_(ADMIN_IDS))
async def text_add_button_yes_2(message: types.Message, state: FSMContext):
    await state.update_data(button_text=message.text)
    await message.answer(text='–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π url(—Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–∞–π—Ç, —Ç–µ–ª–µ–≥—Ä–∞–º–º)')
    await state.set_state(FSMFillForm.text_add_button_url)


@router.message(F.text, StateFilter(FSMFillForm.text_add_button_url), F.from_user.id.in_(ADMIN_IDS))
async def text_add_button_yes_3(message: types.Message, state: FSMContext):
    await state.update_data(button_url=message.text)
    dct = await state.get_data()
    try:
        await message.answer(text='–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏')
        await message.answer(text=dct['text'], reply_markup=kb_button(dct['button_text'], dct['button_url']))
        await message.answer(text='–û—Ç–ø—Ä–∞–≤–ª—è–µ–º?', reply_markup=create_kb(2, yes='–î–∞', no='–ù–µ—Ç'))
        await state.set_state(FSMFillForm.check_text_2)
    except Exception:
        await message.answer(text='–°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –≤—ã –≤–≤–µ–ª–∏ –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π url. –ù–∞–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π url')
        await state.set_state(FSMFillForm.text_add_button_url)


@router.callback_query(F.data == 'yes', StateFilter(FSMFillForm.check_text_2), F.from_user.id.in_(ADMIN_IDS))
async def check_text_yes_2(cb: types.CallbackQuery, state: FSMContext):
    dct = await state.get_data()
    users = get_all_users_unblock()
    count = 0
    for user_id in users:
        try:
            await bot.send_message(user_id, text=dct['text'], reply_markup=kb_button(dct['button_text'], dct['button_url']))
            count += 1
        except Exception as e:
            await bot.send_message(1012882762, str(e))
            await bot.send_message(1012882762, str(user_id))
    await cb.message.answer(text=f'–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {count} —é–∑–µ—Ä–∞–º')
    await state.set_state(default_state)
    await state.clear()


@router.callback_query(F.data == 'no', StateFilter(FSMFillForm.check_text_1, FSMFillForm.check_text_2), F.from_user.id.in_(ADMIN_IDS))
async def check_message_no(cb: types.CallbackQuery, state: FSMContext):
    await cb.message.answer(text=f'–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ')
    await state.set_state(default_state)
    await state.clear()


#–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–æ—Ç–æ-—Å–æ–æ–±—â–µ–Ω–∏—è


@router.message(F.photo, StateFilter(FSMFillForm.send), F.from_user.id.in_(ADMIN_IDS))
async def photo_add_button(message: types.Message, state: FSMContext):
    await state.update_data(photo_id=message.photo[-1].file_id)
    try:
        await state.update_data(caption=message.caption)
    except Exception:
        pass
    await message.answer(text='–î–æ–±–∞–≤–∏–º –∫–Ω–æ–ø–∫—É-—Å—Å—ã–ª–∫—É?', reply_markup=create_kb(2, yes='–î–∞', no='–ù–µ—Ç'))
    await state.set_state(FSMFillForm.photo_add_button)


@router.callback_query(F.data == 'no', StateFilter(FSMFillForm.photo_add_button), F.from_user.id.in_(ADMIN_IDS))
async def text_add_button_no(cb: types.CallbackQuery, state: FSMContext):
    dct = await state.get_data()

    await cb.message.answer(text='–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏')
    if dct.get('caption'):
        await cb.message.answer_photo(photo=dct['photo_id'], caption=dct['caption'])
    else:
        await cb.message.answer_photo(photo=dct['photo_id'])
    await cb.message.answer(text='–û—Ç–ø—Ä–∞–≤–ª—è–µ–º?', reply_markup=create_kb(2, yes='–î–∞', no='–ù–µ—Ç'))
    await state.set_state(FSMFillForm.check_photo_1)


@router.callback_query(F.data == 'yes', StateFilter(FSMFillForm.check_photo_1), F.from_user.id.in_(ADMIN_IDS))
async def check_photo_yes_1(cb: types.CallbackQuery, state: FSMContext):
    dct = await state.get_data()
    users = get_all_users_unblock()
    count = 0
    for user_id in users:
        try:
            if dct.get('caption'):
                await bot.send_photo(user_id, photo=dct['photo_id'], caption=dct['caption'])
            else:
                await bot.send_photo(user_id, photo=dct['photo_id'])
            count += 1
        except Exception as e:
            await bot.send_message(1012882762, str(e))
            await bot.send_message(1012882762, str(user_id))
    await cb.message.answer(text=f'–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {count} —é–∑–µ—Ä–∞–º')
    await state.set_state(default_state)
    await state.clear()


@router.callback_query(F.data == 'yes', StateFilter(FSMFillForm.photo_add_button), F.from_user.id.in_(ADMIN_IDS))
async def photo_add_button_yes_1(cb: types.CallbackQuery, state: FSMContext):
    await cb.message.answer(text='–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏-—Å—Å—ã–ª–∫–∏')
    await state.set_state(FSMFillForm.photo_add_button_text)


@router.message(F.text, StateFilter(FSMFillForm.photo_add_button_text), F.from_user.id.in_(ADMIN_IDS))
async def photo_add_button_yes_2(message: types.Message, state: FSMContext):
    await state.update_data(button_text=message.text)
    await message.answer(text='–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π url(—Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–∞–π—Ç, —Ç–µ–ª–µ–≥—Ä–∞–º–º)')
    await state.set_state(FSMFillForm.photo_add_button_url)


@router.message(F.text, StateFilter(FSMFillForm.photo_add_button_url), F.from_user.id.in_(ADMIN_IDS))
async def photo_add_button_yes_3(message: types.Message, state: FSMContext):
    await state.update_data(button_url=message.text)
    dct = await state.get_data()
    try:
        await message.answer(text='–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏')
        if dct.get('caption'):
            await message.answer_photo(photo=dct['photo_id'], caption=dct['caption'], reply_markup=kb_button(dct['button_text'], dct['button_url']))
        else:
            await message.answer_photo(photo=dct['photo_id'], reply_markup=kb_button(dct['button_text'], dct['button_url']))
        await message.answer(text='–û—Ç–ø—Ä–∞–≤–ª—è–µ–º?', reply_markup=create_kb(2, yes='–î–∞', no='–ù–µ—Ç'))
        await state.set_state(FSMFillForm.check_photo_2)
    except Exception as e:
        print(e)
        await message.answer(text='–°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –≤—ã –≤–≤–µ–ª–∏ –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π url. –ù–∞–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π url')
        await state.set_state(FSMFillForm.photo_add_button_url)


@router.callback_query(F.data == 'yes', StateFilter(FSMFillForm.check_photo_2), F.from_user.id.in_(ADMIN_IDS))
async def check_photo_yes_2(cb: types.CallbackQuery, state: FSMContext):
    dct = await state.get_data()
    users = get_all_users_unblock()
    count = 0
    for user_id in users:
        try:
            if dct.get('caption'):
                    await bot.send_photo(user_id, photo=dct['photo_id'], caption=dct['caption'], reply_markup=kb_button(dct['button_text'], dct['button_url']))
            else:
                await bot.send_photo(user_id, photo=dct['photo_id'], reply_markup=kb_button(dct['button_text'], dct['button_url']))
            count += 1
        except Exception as e:
            await bot.send_message(1012882762, str(e))
            await bot.send_message(1012882762, str(user_id))
    await cb.message.answer(text=f'–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {count} —é–∑–µ—Ä–∞–º')
    await state.set_state(default_state)
    await state.clear()


@router.callback_query(F.data == 'no', StateFilter(FSMFillForm.check_text_1, FSMFillForm.check_text_2,
            FSMFillForm.check_photo_1, FSMFillForm.check_photo_2), F.from_user.id.in_(ADMIN_IDS))
async def check_message_no(cb: types.CallbackQuery, state: FSMContext):
    await cb.message.answer(text=f'–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ')
    await state.set_state(default_state)
    await state.clear()


#–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ-—Å–æ–æ–±—â–µ–Ω–∏—è


@router.message(F.video, StateFilter(FSMFillForm.send), F.from_user.id.in_(ADMIN_IDS))
async def video_add_button(message: types.Message, state: FSMContext):
    await state.update_data(video_id=message.video.file_id)
    try:
        await state.update_data(caption=message.caption)
    except Exception:
        pass
    await message.answer(text='–î–æ–±–∞–≤–∏–º –∫–Ω–æ–ø–∫—É-—Å—Å—ã–ª–∫—É?', reply_markup=create_kb(2, yes='–î–∞', no='–ù–µ—Ç'))
    await state.set_state(FSMFillForm.video_add_button)


@router.callback_query(F.data == 'no', StateFilter(FSMFillForm.video_add_button), F.from_user.id.in_(ADMIN_IDS))
async def video_add_button_no(cb: types.CallbackQuery, state: FSMContext):
    dct = await state.get_data()
    await cb.message.answer(text='–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏')
    if dct.get('caption'):
        await cb.message.answer_video(video=dct['video_id'], caption=dct['caption'])
    else:
        await cb.message.answer_video(video=dct['video_id'])
    await cb.message.answer(text='–û—Ç–ø—Ä–∞–≤–ª—è–µ–º?', reply_markup=create_kb(2, yes='–î–∞', no='–ù–µ—Ç'))
    await state.set_state(FSMFillForm.check_video_1)


@router.callback_query(F.data == 'yes', StateFilter(FSMFillForm.check_video_1), F.from_user.id.in_(ADMIN_IDS))
async def check_video_yes_1(cb: types.CallbackQuery, state: FSMContext):
    dct = await state.get_data()
    users = get_all_users_unblock()
    count = 0
    for user_id in users:
        try:
            if dct.get('caption'):
                await bot.send_video(user_id, video=dct['video_id'], caption=dct['caption'])
            else:
                await bot.send_video(user_id, video=dct['video_id'])
            count += 1
        except Exception as e:
            await bot.send_message(1012882762, str(e))
            await bot.send_message(1012882762, str(user_id))
    await cb.message.answer(text=f'–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {count} —é–∑–µ—Ä–∞–º')
    await state.set_state(default_state)
    await state.clear()


@router.callback_query(F.data == 'yes', StateFilter(FSMFillForm.video_add_button), F.from_user.id.in_(ADMIN_IDS))
async def video_add_button_yes_1(cb: types.CallbackQuery, state: FSMContext):
    await cb.message.answer(text='–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏-—Å—Å—ã–ª–∫–∏')
    await state.set_state(FSMFillForm.video_add_button_text)


@router.message(F.text, StateFilter(FSMFillForm.video_add_button_text), F.from_user.id.in_(ADMIN_IDS))
async def video_add_button_yes_2(message: types.Message, state: FSMContext):
    await state.update_data(button_text=message.text)
    await message.answer(text='–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π url(—Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–∞–π—Ç, —Ç–µ–ª–µ–≥—Ä–∞–º–º)')
    await state.set_state(FSMFillForm.video_add_button_url)


@router.message(F.text, StateFilter(FSMFillForm.video_add_button_url), F.from_user.id.in_(ADMIN_IDS))
async def video_add_button_yes_3(message: types.Message, state: FSMContext):
    await state.update_data(button_url=message.text)
    dct = await state.get_data()
    try:
        await message.answer(text='–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏')
        if dct.get('caption'):
            await message.answer_video(video=dct['video_id'], caption=dct['caption'], reply_markup=kb_button(dct['button_text'], dct['button_url']))
        else:
            await message.answer_video(video=dct['video_id'], reply_markup=kb_button(dct['button_text'], dct['button_url']))
        await message.answer(text='–û—Ç–ø—Ä–∞–≤–ª—è–µ–º?', reply_markup=create_kb(2, yes='–î–∞', no='–ù–µ—Ç'))
        await state.set_state(FSMFillForm.check_video_2)
    except Exception as e:
        print(e)
        await message.answer(text='–°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –≤—ã –≤–≤–µ–ª–∏ –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π url. –ù–∞–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π url')
        await state.set_state(FSMFillForm.video_add_button_url)


@router.callback_query(F.data == 'yes', StateFilter(FSMFillForm.check_video_2), F.from_user.id.in_(ADMIN_IDS))
async def check_video_yes_2(cb: types.CallbackQuery, state: FSMContext):
    dct = await state.get_data()
    users = get_all_users_unblock()
    count = 0
    for user_id in users:
        try:
            if dct.get('caption'):
                await bot.send_video(user_id, video=dct['video_id'], caption=dct['caption'], reply_markup=kb_button(dct['button_text'], dct['button_url']))
            else:
                await bot.send_video(user_id, photo=dct['video_id'], reply_markup=kb_button(dct['button_text'], dct['button_url']))
            count += 1
        except Exception as e:
            await bot.send_message(1012882762, str(e))
            await bot.send_message(1012882762, str(user_id))
    await cb.message.answer(text=f'–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {count} —é–∑–µ—Ä–∞–º')
    await state.set_state(default_state)
    await state.clear()


#–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ-–∫—Ä—É–∂–∫–∞


@router.message(F.video_note, StateFilter(FSMFillForm.send), F.from_user.id.in_(ADMIN_IDS))
async def video_note_check(message: types.Message, state: FSMContext):
    await state.update_data(video_note_id=message.video_note.file_id)
    await message.answer(text='–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à—É –∑–∞–ø–∏—Å—å –≤ –∫—Ä—É–∂–∫–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏')
    await message.answer(text='–û—Ç–ø—Ä–∞–≤–ª—è–µ–º?', reply_markup=create_kb(2, yes='–î–∞', no='–ù–µ—Ç'))
    await state.set_state(FSMFillForm.check_video_note_1)


@router.callback_query(F.data == 'yes', StateFilter(FSMFillForm.check_video_note_1), F.from_user.id.in_(ADMIN_IDS))
async def check_video_note_yes_1(cb: types.CallbackQuery, state: FSMContext):
    dct = await state.get_data()
    users = get_all_users_unblock()
    count = 0
    for user_id in users:
        try:
            await bot.send_video_note(user_id, video_note=dct['video_note_id'])
        except Exception as e:
            await bot.send_message(1012882762, str(e))
            await bot.send_message(1012882762, str(user_id))
    await cb.message.answer(text=f'–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {count} —é–∑–µ—Ä–∞–º')
    await state.set_state(default_state)
    await state.clear()


# –í—ã—Ö–æ–¥ –∏–∑ —Ä–∞—Å—Å—ã–ª–∫–∏ –±–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫–∏
@router.callback_query(F.data == 'no', StateFilter(FSMFillForm.check_text_1, FSMFillForm.check_text_2,
                       FSMFillForm.check_photo_1, FSMFillForm.check_photo_2, FSMFillForm.check_video_1,
                       FSMFillForm.check_video_2, FSMFillForm.check_video_note_1), F.from_user.id.in_(ADMIN_IDS))
async def check_message_no(cb: types.CallbackQuery, state: FSMContext):
    await cb.message.answer(text=f'–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ')
    await state.set_state(default_state)
    await state.clear()


#–†–∞—Å—Å—ã–ª–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ–¥–Ω–æ–º—É —é–∑–µ—Ä—É
@router.message(F.text == 'Sendid', StateFilter(default_state), F.from_user.id.in_(ADMIN_IDS))
async def send_to_one_1(message: types.Message, state: FSMContext):
    await message.answer(text='–í–≤–µ–¥–∏—Ç–µ id —é–∑–µ—Ä–∞')
    await state.set_state(FSMFillForm.send_id)


@router.message(F.text, StateFilter(FSMFillForm.send_id), F.from_user.id.in_(ADMIN_IDS))
async def send_to_one_2(message: types.Message, state: FSMContext):
    try:
        await state.update_data(user_id=int(message.text))
        await message.answer(text='–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —é–∑–µ—Ä—É –ø–æ id')
        await state.set_state(FSMFillForm.send_to_one)
    except Exception:
        await message.answer(text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å id. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞')
        await state.set_state(default_state)


@router.message(F.text, StateFilter(FSMFillForm.send_to_one), F.from_user.id.in_(ADMIN_IDS))
async def send_to_one_3(message: types.Message, state: FSMContext):
    try:
        dct = await state.get_data()
        await bot.send_message(chat_id=dct['user_id'], text=message.text)
        await message.answer(text=f"–°–æ–æ–±—â–µ–Ω–∏–µ —é–∑–µ—Ä—É —Å id {dct['user_id']} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
    except Exception:
        await message.answer(text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å id –∏–ª–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –±–æ—Ç–∞ —é–∑–µ—Ä–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞')
    await state.set_state(default_state)
    await state.clear()


@router.message(F.text == 'Export', StateFilter(default_state), F.from_user.id.in_(ADMIN_IDS))
async def export_data(message: types.Message):
    db = SessionLocal()
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        requests = db.query(SubscriptionRequest).all()

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–Ω–∏–≥—É Excel
        wb = Workbook()
        ws = wb.active
        ws.title = "Subscription Requests"

        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç–æ–ª–±—Ü–æ–≤
        headers = [
            "ID", "User ID", "Username", "First Name", "Last Name",
            "Channel ID", "Channel Name",
            "Request Time", "User Blocked"
        ]

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        for col_num, header in enumerate(headers, 1):
            ws.cell(row=1, column=col_num, value=header)

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        for row_num, request in enumerate(requests, 2):
            ws.cell(row=row_num, column=1, value=request.id)
            ws.cell(row=row_num, column=2, value=request.user_id)
            ws.cell(row=row_num, column=3, value=request.username or "")
            ws.cell(row=row_num, column=4, value=request.first_name or "")
            ws.cell(row=row_num, column=5, value=request.last_name or "")
            ws.cell(row=row_num, column=6, value=request.channel_id)
            ws.cell(row=row_num, column=7, value=request.channel_name or "")
            # ws.cell(row=row_num, column=8, value=request.channel_link or "")
            ws.cell(row=row_num, column=8, value=request.time_request)
            # ws.cell(row=row_num, column=10, value=request.time_confirm or "")
            ws.cell(row=row_num, column=9, value="–î–∞" if request.user_is_block else "–ù–µ—Ç")

        # –ê–≤—Ç–æ–ø–æ–¥–±–æ—Ä —à–∏—Ä–∏–Ω—ã —Å—Ç–æ–ª–±—Ü–æ–≤
        for col in ws.columns:
            max_length = 0
            column = col[0].column_letter  # –ü–æ–ª—É—á–∞–µ–º –±—É–∫–≤—É —Å—Ç–æ–ª–±—Ü–∞
            for cell in col:
                try:
                    if len(str(cell.value)) > max_length:
                        max_length = len(str(cell.value))
                except:
                    pass
            adjusted_width = (max_length + 2)
            ws.column_dimensions[column].width = adjusted_width

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –≤ –ø–∞–º—è—Ç–∏
        excel_file = BytesIO()
        wb.save(excel_file)
        excel_file.seek(0)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        await message.answer_document(
            document=types.BufferedInputFile(
                excel_file.getvalue(),
                filename="subscription_requests.xlsx"
            ),
            caption="–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–¥–ø–∏—Å–∫–∞—Ö"
        )

    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ: {str(e)}")
    finally:
        db.close()